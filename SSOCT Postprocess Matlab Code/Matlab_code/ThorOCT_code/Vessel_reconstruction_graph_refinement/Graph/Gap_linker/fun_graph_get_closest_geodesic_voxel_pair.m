function boundary_voxel_pair_ind = fun_graph_get_closest_geodesic_voxel_pair(metric, ind_list_1, ind_list_2, connectivity)

% Get the mask that contains the target cc mask, the connected mask
% generated by threshold relaxation, and the boundary voxels mask of the
% original cc. 
% - Need to find a way to reduce the size fo the saerch space.
% disp('Debug');
% if nargin < 4
%     connectivity = 6;
% end
% local_bbox_size = size(metric);
% sub_list_1 = fun_ind2sub(local_bbox_size, ind_list_1);
% sub_list_2 = fun_ind2sub(local_bbox_size, ind_list_2);
% % Bounding box for the boundary voxels 
% bbox_min = min(cat(1, sub_list_1, sub_list_2), [], 1);
% bbox_max = max(cat(1, sub_list_1, sub_list_2), [], 1);
% 
% 
% 
% 
% tic
% % Neighbor list of all the valid indices in the local image
% local_valid_mask = ~isinf(metric);
% local_valid_ind = find(local_valid_mask); 
% metric_pad = padarray(metric, [1, 1, 1], 'both');
% local_valid_mask_pad = padarray(local_valid_mask, [1,1,1], 'both');
% local_neighbor_ind_add_pad = fun_skeleton_neighbor_add_coeff_3D(local_bbox_size + 2, connectivity, true)';
% local_neighbor_ind_add = fun_skeleton_neighbor_add_coeff_3D(local_bbox_size , connectivity, true)';
% 
% tmp_sub = fun_ind2sub(local_bbox_size, local_valid_ind);
% local_valid_ind_pad = sub2ind(local_bbox_size+2, tmp_sub(:,1) + 1, tmp_sub(:,2) + 1, tmp_sub(:,3) + 1);
% 
% local_num_valid_ind = numel(local_valid_ind_pad);
% % Construct edge pairs and weight for the edge
% local_neighbor_ind_c = cell(local_num_valid_ind, 1);
% local_neighbor_weight_c = cell(local_num_valid_ind, 1);
% for iter_voxel = 1 : local_num_valid_ind
%     tmp_neighbor_ind_pad = local_valid_ind_pad(iter_voxel) +  local_neighbor_ind_add_pad;
%     tmp_neighbor_ind = local_valid_ind(iter_voxel) +  local_neighbor_ind_add;
%     tmp_neighbor_ind_valid = local_valid_mask_pad(tmp_neighbor_ind_pad);
%     local_neighbor_ind_c{iter_voxel} = tmp_neighbor_ind(tmp_neighbor_ind_valid)';    
%     local_neighbor_weight_c{iter_voxel} = (metric_pad(local_valid_ind_pad(iter_voxel)) + metric_pad(tmp_neighbor_ind_pad(tmp_neighbor_ind_valid))')./2;
% end
% local_num_valid_neighbor = cellfun(@numel, local_neighbor_ind_c);
% 
% graph_s = repelem(local_valid_ind, local_num_valid_neighbor);
% graph_t = cat(1, local_neighbor_ind_c{:});
% graph_weight = cat(1, local_neighbor_weight_c{:});
% % Search for the shortest path 
% assert(all(graph_weight>=0), 'Exist edge of negative weight');
% local_graph = graph(graph_s, graph_t, graph_weight);
% toc
% 
% volumeViewer(metric)
% ep1_ind = sub2ind(local_bbox_size, ep1_sub(1), ep1_sub(2), ep1_sub(3));
% bp1_ind = sub2ind(local_bbox_size, bp1_sub(1), bp1_sub(2), bp1_sub(3));
% ep2_ind = sub2ind(local_bbox_size, ep2_sub(1), ep2_sub(2), ep2_sub(3));
% bp2_ind = sub2ind(local_bbox_size, bp2_sub(1), bp2_sub(2), bp2_sub(3));

end