function [vessel_graph, varargout] = fun_graph_delete_bilink_loop(vessel_graph, vessel_image, min_link_length_bilink_loop)
% fun_graph_delete_bilink_loop find the loops consist of two links in the
% graph. For loops consist of link less than a threshold length, one of the
% edges in the group is deleted. 
% Input: 
%   vessel_graph: structure generated by fun_skeleton_to_graph
%   vessel_image: 3D numerical array, image stack 
%   vessel_mask_dt: 3D numerical array, distance transform of the vessel
%   mask 
%   min_link_length_bilink_loop: loops with both links longer than this
%   value will not be modified. 
% Output: 
%   vessel_graph: updated structure
%   num_rm_bloop: scalar, number of bilink loops removed
%
% Note: This function can be accelerated by replacing
% fun_graph_get_link_features

% Parameter
% Need to set a threshold for bilink loops removal 
% For the loops to be removed, keep the shorter segment and remove the longer
% link segment. 
% Temporarily set the threshold to be both links in the loop should be
% longer than 10 voxels. 
if nargin < 3
    min_link_length_bilink_loop = 15;
end
% Get the bilink loops
bilink_loop = fun_graph_get_bilink_loops(vessel_graph);
% Find the loops to delete
bilink_loop.delete_Q = any(bilink_loop.link_pair_num_voxels <= min_link_length_bilink_loop, 2);
if isempty(bilink_loop.delete_Q) || ~any(bilink_loop.delete_Q)
    varargout{1} = 0;
    return;
end
bilink_loop.deleted_link_pair = bilink_loop.link_label_pair(bilink_loop.delete_Q, :)';
tmp_num_pair = size(bilink_loop.deleted_link_pair, 2);
bilink_loop.delete_link_label = zeros(tmp_num_pair, 1);
cc_int_mean = fun_get_cc_int_mean(vessel_graph.link.cc_ind(bilink_loop.deleted_link_pair(:)), vessel_image);
if tmp_num_pair > 2
    bilink_loop.deleted_link_pair_mean_int = reshape(cc_int_mean, 2, []);
else
    bilink_loop.deleted_link_pair_mean_int = cc_int_mean;
end
% Select the link segment that has lower average intensity to delete
[~,  bilink_loop.deleted_link_idx] = min(bilink_loop.deleted_link_pair_mean_int, [], 1);
if isscalar(bilink_loop.deleted_link_idx)
    tmp_ind = bilink_loop.deleted_link_idx;
else
    tmp_ind = sub2ind(size(bilink_loop.deleted_link_pair), bilink_loop.deleted_link_idx, 1 : tmp_num_pair);
end
bilink_loop.delete_link_label = bilink_loop.deleted_link_pair(tmp_ind);
%% For node pair with more than 2 links
bilink_loop.delete_link_label_ge3 = cell(size(bilink_loop.link_label_pair_ge_3));
for iter_pair = 1 : numel(bilink_loop.link_label_pair_ge_3)
    tmp_link_label = bilink_loop.link_label_pair_ge_3{iter_pair};
    tmp_link_num_voxel = bilink_loop.link_num_voxels_ge_3{iter_pair};
    if all(tmp_link_num_voxel <= min_link_length_bilink_loop)
        tmp_link_int = fun_get_cc_int_mean(vessel_graph.link.cc_ind(tmp_link_label), vessel_image);
        tmp_deleteQ = true(size(tmp_link_label));
        [~, tmp_max_idx] = max(tmp_link_int, [], 1);
        tmp_deleteQ(tmp_max_idx) = false;
        bilink_loop.delete_link_label_ge3{iter_pair} = tmp_link_label(tmp_deleteQ);
    end
end
%%
bilink_loop.delete_link_label_all = cat(1, bilink_loop.delete_link_label',...
    cat(1, bilink_loop.delete_link_label_ge3{:}));
vessel_graph = fun_graph_delete_internal_links(vessel_graph, bilink_loop.delete_link_label_all);
if nargout > 1
    num_rm_bloop = numel(bilink_loop.delete_link_label_all);
    varargout{1} = num_rm_bloop;
end
end
%% 
function cc_int_mean = fun_get_cc_int_mean(cc_ind, vessel_image)

num_cc = numel(cc_ind);
cc_int_mean = zeros(num_cc, 1);
for iter_cc = 1 : num_cc
    tmp_int = double(vessel_image(cc_ind{iter_cc}));
    cc_int_mean(iter_cc) = mean(tmp_int);
end
end