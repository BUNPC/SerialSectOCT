function duplicated_link_label = fun_graph_get_duplicated_ep2_link_label(int_link_1, int_link_2)
% fun_graph_get_duplicated_ep2_index finds the links with two endpoints that
% appear in both int_link_1 and int_link_2. If the same link appear twice,
% it means that this link cannot find neighbor to connect with in the
% previuous rould of gap fixing process. 
% Input:
%   int_link_1/2: structure generated by fun_graph_get_free_link
%
link_ep2_to_removeQ = false(int_link_2.ep2.num_cc, 1);
for iter_linker = 1 : int_link_2.ep2.num_cc
    tmp_ep_1_ind = int_link_2.ep2.ep_pair_ind(1, iter_linker);
    tmp_ep_2_ind = int_link_2.ep2.ep_pair_ind(2, iter_linker);
    % If the remaining link with two endpoints cannot find the correct
    % linkers, the same pair of endpoint must exist also in int_link_1
    [tmp_idx_1, tmp_idx_2] = find(tmp_ep_1_ind == int_link_1.ep2.ep_pair_ind);
    if tmp_idx_1 == 1
        if int_link_1.ep2.ep_pair_ind(2, tmp_idx_2) == tmp_ep_2_ind
            link_ep2_to_removeQ(iter_linker) = true;
        end
    elseif tmp_idx_1 == 2
        if int_link_1.ep2.ep_pair_ind(1, tmp_idx_2) == tmp_ep_2_ind
            link_ep2_to_removeQ(iter_linker) = true;
        end
    end
end
duplicated_link_label = int_link_2.ep2.link_label(link_ep2_to_removeQ);
end