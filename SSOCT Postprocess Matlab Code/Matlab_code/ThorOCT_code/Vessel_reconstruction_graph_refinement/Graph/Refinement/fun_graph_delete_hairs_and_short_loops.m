function [input_graph, varargout] = fun_graph_delete_hairs_and_short_loops(input_graph, vessel_image, para)
% fun_graph_delete_hairs_and_short_loops automatically delete: 
% 1.internal link with endpoints shorter than certian range
% 2. Self-loop shorter than certian number
% 3. Loops consist of two links, whose lenghs are both shorter than a
% certian number. 
% Input: 
%   input_graph: structure generated by fun_skeleton_to_graph
%   vessel_image: 3D numerical array, image stack of vessels. 
%   vessel_mask_dt: 3D single array, distance transform of the vessel mask 
%   para: structure with fields defined below. Default values are also
%   defined below. 
% Output: 
%   input_graph: updated structure
%
%
if nargin < 3
    internal_offset = 16;
    max_hair_length = 2;
    max_biloop_length_to_delete = 15;
    max_loop_length = 30;
else
    internal_offset = para.internal_offset;
    max_hair_length = para.pruning_max_length;
    max_biloop_length_to_delete = para.max_bilink_loop_length;    
    max_loop_length = para.max_self_loop_length;
end
stat = struct;
tmp_num_self_loop = 1;
tmp_num_bilink_loop = 1;
tmp_num_short_link_ep1 = 1;

stat.num_self_loop = 0;
stat.num_bilink_loop = 0;
stat.num_short_link_ep1 = 0;
while tmp_num_short_link_ep1 || tmp_num_self_loop || tmp_num_bilink_loop
    [input_graph, tmp_num_short_link_ep1] = fun_graph_pruning_internal_short_hairs(input_graph, max_hair_length, internal_offset);
    stat.num_short_link_ep1 = stat.num_short_link_ep1 + tmp_num_short_link_ep1;
    [input_graph, tmp_num_self_loop] = fun_graph_delete_self_loop(input_graph, max_loop_length);
    stat.num_self_loop = stat.num_self_loop + tmp_num_self_loop;
    
    [input_graph, tmp_num_bilink_loop] = fun_graph_delete_bilink_loop(input_graph, vessel_image, max_biloop_length_to_delete);
    stat.num_bilink_loop = stat.num_bilink_loop + tmp_num_bilink_loop;
end
if nargout == 2
    varargout{1} = stat;
end
end