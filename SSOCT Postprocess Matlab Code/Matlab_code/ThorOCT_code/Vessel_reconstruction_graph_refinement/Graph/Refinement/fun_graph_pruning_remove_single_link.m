function [input_graph, updated_node_info] = fun_graph_pruning_remove_single_link(input_graph, link_label, update_ind_mapQ)
% fun_graph_pruning_remove_single_link is a sub-function of
% fun_graph_pruning. It removes single link in the graph, without changing
% any labels of the nodes and links
% Input: 
%   input_graph: graph structure, generated by fun_skeleton_to_graph
%   link_label : numerical scalar, link label to be removed
% Output: 
%   input_graph: updated graph structure
%   updated_node_info: structure of fields:
%         degree: scalar or 2-by-1 vector, number of remaining links connected to the node
%         label: scalar or 2-by-1 vector, node label
%         num_voxel: scalar or 2-by-1 vector, size of the node
%   
% Written by Xiang Ji, Nov 11, 2018
if nargin < 3
    update_ind_mapQ = true;
end
connected_node_label = input_graph.link.connected_node_label(link_label,:);
connected_node_label = connected_node_label(connected_node_label>0);
% Remove duplicated node label caused by self-loop
num_connected_node_label = numel(connected_node_label);
if num_connected_node_label > 1
    if connected_node_label(1) == connected_node_label(2)
        connected_node_label = connected_node_label(1);
        num_connected_node_label = 1;
    end
end
% Remove duplicate
updated_node_info = struct;
% Update the node information
if ~isempty(connected_node_label)
    for tmp_node_idx = 1 : num_connected_node_label
        tmp_node_label = connected_node_label(tmp_node_idx);
        input_graph.node.num_link(tmp_node_label) = input_graph.node.num_link(tmp_node_label) - 1; 
        tmp_connected_link_labels = input_graph.node.connected_link_label{tmp_node_label};
        tmp_connected_link_labels = tmp_connected_link_labels(tmp_connected_link_labels~=link_label);
        input_graph.node.connected_link_label{tmp_node_label} = tmp_connected_link_labels;
    end
    % Degree is defined as the number of link connected to this node
    updated_node_info.degree = cellfun(@numel, input_graph.node.connected_link_label(connected_node_label));
    updated_node_info.label = connected_node_label;
    updated_node_info.num_voxel = input_graph.node.num_voxel_per_cc(connected_node_label);
else
    updated_node_info.degree = [];
    updated_node_info.label = [];
    updated_node_info.num_voxel = [];
%     warning('Link %d does not connect to any nodes', link_label);
end
% Remove link 
if update_ind_mapQ
    link_cc_ind = input_graph.link.cc_ind{link_label};
    input_graph.link.map_ind_2_label(link_cc_ind) = 0;
end
input_graph.tmp_link_ind_old_to_new(link_label+1) = 0; % 2019/08/14: This link label mapping need to be update no matter whether link.map_ind_2_label is updated or not. 

input_graph.link.cc_ind{link_label} = [];
input_graph.link.connected_node_label(link_label,:) = 0;
input_graph.link.num_node(link_label) = 0;
% Update the endpoint information
% input_graph.endpoint.link_label is modified along the graph modification
% process and thus the label is already up to date, so we don't need to map
% it to the new label. The only label that need to be mapped is the one
% from link.map_ind_2_label. 
connected_endpoint_label = (input_graph.endpoint.link_label == link_label);
if any(connected_endpoint_label)
    input_graph.endpoint.link_label(connected_endpoint_label) = 0;
    input_graph.endpoint.pos_ind(connected_endpoint_label) = 0;
end
end