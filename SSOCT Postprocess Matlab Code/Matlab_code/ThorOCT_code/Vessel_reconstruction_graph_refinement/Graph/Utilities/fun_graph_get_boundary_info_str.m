function near_boundary_str  = fun_graph_get_boundary_info_str(vessel_graph, internal_offset)
% fun_graph_get_boundary_link_Q finds the link labels that connected to
% either endpoint or node that lies near to the boundary of the image block
% 
% Input: 
%   vessel_graph: structure generated by fun_skeleton_to_graph
%   internal_offerset: numerical scalar. For each dimension, [1,
%   internal_offset] and [end - internal_offset + 1, end] are considered
%   "close to the boundary";
% Ouput:
%   near_boundary_str: structure with feilds defined below. 
%
% Implemented by Xiang Ji on Jan 28, 2019

image_size = vessel_graph.num.mask_size;
% Find the endpoints and nodes that are close to the boundary
node_sub = fun_ind2sub(image_size, vessel_graph.node.pos_ind);
endpoint_sub = fun_ind2sub(image_size, vessel_graph.endpoint.pos_ind);

node_near_boundary_Q = any( bsxfun(@le, node_sub, [internal_offset, internal_offset, internal_offset]), 2) | ...
    any( bsxfun(@ge, node_sub, image_size - internal_offset + 1), 2);
node_near_boundary_label = unique(vessel_graph.node.label(node_near_boundary_Q));

endpoint_near_boundary_Q = any( bsxfun(@le, endpoint_sub, [internal_offset, internal_offset, internal_offset]), 2) | ...
    any( bsxfun(@ge, endpoint_sub, image_size - internal_offset + 1), 2);

endpoint_link_label = vessel_graph.endpoint.link_label(endpoint_near_boundary_Q);
if ~isempty(vessel_graph.node.connected_link_label)
    if  iscolumn(vessel_graph.node.connected_link_label{1})
        node_link_label = cat(1, vessel_graph.node.connected_link_label{node_near_boundary_label});
    else
        % Is row vector
        node_link_label = cat(2, vessel_graph.node.connected_link_label{node_near_boundary_label})';
    end
else
    node_link_label = [];
end    
near_boundary_str = struct;
near_boundary_str.link_near_boundary_label = unique([endpoint_link_label; node_link_label]);
near_boundary_str.link_near_boundary_Q = false(vessel_graph.link.num_cc,1);
near_boundary_str.link_near_boundary_Q(near_boundary_str.link_near_boundary_label) = true;
near_boundary_str.link_not_near_boundary_Q = ~near_boundary_str.link_near_boundary_Q;
near_boundary_str.link_not_near_boundary_label = find(near_boundary_str.link_not_near_boundary_Q);

near_boundary_str.node_voxel_near_boundary_Q = node_near_boundary_Q;
near_boundary_str.node_near_boundary_label = node_near_boundary_label;
near_boundary_str.node_near_boundary_Q = false(vessel_graph.node.num_cc,1);
near_boundary_str.node_near_boundary_Q(near_boundary_str.node_near_boundary_label) = true;
near_boundary_str.node_not_near_boundary_Q = ~near_boundary_str.node_near_boundary_Q;
near_boundary_str.node_not_near_boundary_label = find(near_boundary_str.node_not_near_boundary_Q);

near_boundary_str.endpoint_near_boundar_Q = endpoint_near_boundary_Q;

end