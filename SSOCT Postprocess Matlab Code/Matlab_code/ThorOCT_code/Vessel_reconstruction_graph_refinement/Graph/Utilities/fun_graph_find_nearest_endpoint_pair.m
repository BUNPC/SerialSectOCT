function nearest_ep_pair = fun_graph_find_nearest_endpoint_pair(int_link)
% fun_graph_find_nearest_endpoint_pair finds the nearest endpoint pairs 
% Input: 
%   int_link: structure, generated by fun_graph_get_free_link
% Output: 
%   nearest_ep_pair: structure with fields
%       ep1_ep1: endpoint on single-endpoint link to endpoint on
%       single-endpoint link. Structure with fields
%       ep1_ep2: endpoint on single-endpoint link to an endpoint on
%       double-endpoint link. Structure with fields
%       ep2_ep2: endpoint on double-endpoint link to an endpoint on another
%       double-endpoint link. Structure with fields
% 
% Parameters
% Maximum distance between the recorded endpoint pairs
search_range_ep1_to_ep1 = 60;% um      
search_range_ep1_to_ep2 = 25;% um
search_range_ep2_to_ep2 = 20;% um

nearest_ep_pair = struct;
% ep1 to ep1
dist_ep1_to_ep1 = squareform(pdist(int_link.ep1.ep_sub));

[mutual_nn_ep1_idx, mutual_nn_ep2_idx, mutual_nn_dist] = fun_find_col_row_co_minimum(dist_ep1_to_ep1, true);
tmp_Q = mutual_nn_dist <= search_range_ep1_to_ep1;
mutual_nn_ep1_idx = mutual_nn_ep1_idx(tmp_Q);
mutual_nn_ep2_idx = mutual_nn_ep2_idx(tmp_Q);
mutual_nn_dist = mutual_nn_dist(tmp_Q);
nearest_ep_pair.ep1_ep1.ind_1 = int_link.ep1.ep_ind(mutual_nn_ep1_idx);
nearest_ep_pair.ep1_ep1.ind_2 = int_link.ep1.ep_ind(mutual_nn_ep2_idx);
nearest_ep_pair.ep1_ep1.pair_ind = cat(2, int_link.ep1.ep_ind(mutual_nn_ep1_idx), ...
    int_link.ep1.ep_ind(mutual_nn_ep2_idx));
nearest_ep_pair.ep1_ep1.pair_link_label = cat(2, nearest_ep_pair.ep1_ep1.ind_1, ...
    nearest_ep_pair.ep1_ep1.ind_2 );
nearest_ep_pair.ep1_ep1.pair_ep_dist = mutual_nn_dist;
% Delete duplicate:
tmp_pair_ind = sort(nearest_ep_pair.ep1_ep1.pair_ind, 2, 'ascend');
[~, tmp_unique_idx] = unique(tmp_pair_ind, 'rows', 'stable');
nearest_ep_pair.ep1_ep1.ind_1 = nearest_ep_pair.ep1_ep1.ind_1(tmp_unique_idx);
nearest_ep_pair.ep1_ep1.ind_2 = nearest_ep_pair.ep1_ep1.ind_2(tmp_unique_idx);
nearest_ep_pair.ep1_ep1.pair_ind = nearest_ep_pair.ep1_ep1.pair_ind(tmp_unique_idx, :);
nearest_ep_pair.ep1_ep1.pair_link_label = nearest_ep_pair.ep1_ep1.pair_link_label(tmp_unique_idx, :);
nearest_ep_pair.ep1_ep1.pair_ep_dist = nearest_ep_pair.ep1_ep1.pair_ep_dist(tmp_unique_idx);
% ep1 to ep2
dist_ep1_to_ep2 = pdist2(int_link.ep1.ep_sub, int_link.ep2.ep_sub);

[mutual_nn_ep1_idx, mutual_nn_ep2_idx, mutual_nn_dist] = fun_find_col_row_co_minimum(dist_ep1_to_ep2, false);
tmp_Q = mutual_nn_dist <= search_range_ep1_to_ep2;
mutual_nn_ep1_idx = mutual_nn_ep1_idx(tmp_Q);
mutual_nn_ep2_idx = mutual_nn_ep2_idx(tmp_Q);
mutual_nn_dist = mutual_nn_dist(tmp_Q);

nearest_ep_pair.ep1_ep1.ind_1 = int_link.ep1.ep_ind(mutual_nn_ep1_idx);
nearest_ep_pair.ep1_ep1.ind_2 = int_link.ep2.ep_ind(mutual_nn_ep2_idx);
nearest_ep_pair.ep1_ep2.pair_ind = cat(2, nearest_ep_pair.ep1_ep1.ind_1, nearest_ep_pair.ep1_ep1.ind_2);
nearest_ep_pair.ep1_ep2.pair_link_label = cat(2, int_link.ep1.link_label(mutual_nn_ep1_idx), int_link.ep2.ep_link_label(mutual_nn_ep2_idx));
nearest_ep_pair.ep1_ep2.pair_ep_dist = mutual_nn_dist;

% ep2 to ep2
dist_ep2_to_ep2 = squareform(pdist(int_link.ep2.ep_sub));
tmp_max = max(dist_ep2_to_ep2(:));
for iter_ep2 = 1 : 2 : (int_link.ep2.num_cc) * 2
    dist_ep2_to_ep2(iter_ep2, iter_ep2+1) = tmp_max + 1;
    dist_ep2_to_ep2(iter_ep2+1, iter_ep2) = tmp_max + 1;
end
[mutual_nn_ep2_1_idx, mutual_nn_ep2_2_idx, mutual_nn_dist_ep2ep2] = fun_find_col_row_co_minimum(dist_ep2_to_ep2, true);
tmp_Q = mutual_nn_dist_ep2ep2 <= search_range_ep2_to_ep2;
mutual_nn_ep2_1_idx = mutual_nn_ep2_1_idx(tmp_Q);
mutual_nn_ep2_2_idx = mutual_nn_ep2_2_idx(tmp_Q);
mutual_nn_dist_ep2ep2 = mutual_nn_dist_ep2ep2(tmp_Q);

[~, tmp_unique_idx ] = unique(sort(cat(2, mutual_nn_ep2_1_idx, mutual_nn_ep2_2_idx), 2, 'ascend'), 'row', 'stable');
nearest_ep_pair.ep2_ep2.pair_ind  = cat(2, int_link.ep2.ep_ind(mutual_nn_ep2_1_idx(tmp_unique_idx)), ...
    int_link.ep2.ep_ind(mutual_nn_ep2_2_idx(tmp_unique_idx)));
nearest_ep_pair.ep2_ep2.pair_link_label = cat(2, int_link.ep2.ep_link_label(mutual_nn_ep2_1_idx(tmp_unique_idx)),...
    int_link.ep2.ep_link_label(mutual_nn_ep2_2_idx(tmp_unique_idx)));
nearest_ep_pair.ep2_ep2.pair_ep_dist = mutual_nn_dist_ep2ep2(tmp_unique_idx);

end