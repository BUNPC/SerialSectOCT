function [methodinfo,structs,enuminfo,ThunkLibName]=AlazarInclude
%ALAZARINCLUDE Create structures to define interfaces found in 'AlazarDSP'.

%This function was generated by loadlibrary.m parser version  on Mon Mar 26 12:33:08 2018
%perl options:'AlazarDSP.i -outfile=AlazarInclude.m -thunkfile=ATSApi_thunk_pcwin64.c -header=AlazarDSP.h ./AlazarApi.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'ATSApi_thunk_pcwin64');
% unsigned int AlazarGetOEMFPGAName ( int opcodeID , char * FullPath , unsigned long * error ); 
fcns.thunkname{fcnNum}='uint32int32cstringvoidPtrThunk';fcns.name{fcnNum}='AlazarGetOEMFPGAName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarOEMSetWorkingDirectory ( char * wDir , unsigned long * error ); 
fcns.thunkname{fcnNum}='uint32cstringvoidPtrThunk';fcns.name{fcnNum}='AlazarOEMSetWorkingDirectory'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarOEMGetWorkingDirectory ( char * wDir , unsigned long * error ); 
fcns.thunkname{fcnNum}='uint32cstringvoidPtrThunk';fcns.name{fcnNum}='AlazarOEMGetWorkingDirectory'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarDownLoadFPGA ( HANDLE handle , char * FileName , U32 * RetValue ); 
fcns.thunkname{fcnNum}='uint32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='AlazarDownLoadFPGA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarOEMDownLoadFPGA ( HANDLE handle , char * FileName , U32 * RetValue ); 
fcns.thunkname{fcnNum}='uint32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='AlazarOEMDownLoadFPGA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarReadWriteTest ( HANDLE handle , U32 * Buffer , U32 SizeToWrite , U32 SizeToRead ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrulongulongThunk';fcns.name{fcnNum}='AlazarReadWriteTest'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulongPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarMemoryTest ( HANDLE handle , U32 * errors ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarMemoryTest'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarBusyFlag ( HANDLE handle , int * BusyFlag ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarBusyFlag'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% unsigned int AlazarTriggeredFlag ( HANDLE handle , int * TriggeredFlag ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarTriggeredFlag'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% unsigned int AlazarGetSDKVersion ( U8 * major , U8 * minor , U8 * revision ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarGetSDKVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint8Ptr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
% unsigned int AlazarGetDriverVersion ( U8 * major , U8 * minor , U8 * revision ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarGetDriverVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint8Ptr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
% unsigned int AlazarGetBoardRevision ( HANDLE handle , U8 * major , U8 * minor ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarGetBoardRevision'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
% U32 AlazarBoardsFound (); 
fcns.thunkname{fcnNum}='ulongThunk';fcns.name{fcnNum}='AlazarBoardsFound'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% HANDLE AlazarOpen ( char * boardName ); 
fcns.thunkname{fcnNum}='voidPtrcstringThunk';fcns.name{fcnNum}='AlazarOpen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% void AlazarClose ( HANDLE handle ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='AlazarClose'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% U32 AlazarGetBoardKind ( HANDLE handle ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='AlazarGetBoardKind'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarGetCPLDVersion ( HANDLE handle , U8 * major , U8 * minor ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarGetCPLDVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
% unsigned int AlazarAutoCalibrate ( HANDLE handle ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='AlazarAutoCalibrate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarGetChannelInfo ( HANDLE handle , U32 * memorySize , U8 * bitsPerSample ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarGetChannelInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulongPtr', 'uint8Ptr'};fcnNum=fcnNum+1;
% unsigned int AlazarInputControl ( HANDLE handle , U8 channel , U32 coupling , U32 inputRange , U32 impedance ); 
fcns.thunkname{fcnNum}='uint32voidPtruint8ulongulongulongThunk';fcns.name{fcnNum}='AlazarInputControl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarInputControlEx ( HANDLE handle , U32 channel , U32 couplingId , U32 rangeId , U32 impedenceId ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongulongulongulongThunk';fcns.name{fcnNum}='AlazarInputControlEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarSetPosition ( HANDLE handle , U8 Channel , int PMPercent , U32 InputRange ); 
fcns.thunkname{fcnNum}='uint32voidPtruint8int32ulongThunk';fcns.name{fcnNum}='AlazarSetPosition'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8', 'int32', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarSetExternalTrigger ( HANDLE handle , U32 couplingId , U32 rangeId ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongulongThunk';fcns.name{fcnNum}='AlazarSetExternalTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarSetTriggerDelay ( HANDLE handle , U32 Delay ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongThunk';fcns.name{fcnNum}='AlazarSetTriggerDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarSetTriggerTimeOut ( HANDLE handle , U32 timeout_ticks ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongThunk';fcns.name{fcnNum}='AlazarSetTriggerTimeOut'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% U32 AlazarTriggerTimedOut ( HANDLE h ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='AlazarTriggerTimedOut'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarGetTriggerAddress ( HANDLE handle , U32 Record , U32 * TriggerAddress , U32 * TimeStampHighPart , U32 * TimeStampLowPart ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarGetTriggerAddress'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulongPtr', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarSetTriggerOperation ( HANDLE handle , U32 TriggerOperation , U32 TriggerEngine1 , U32 Source1 , U32 Slope1 , U32 Level1 , U32 TriggerEngine2 , U32 Source2 , U32 Slope2 , U32 Level2 ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongulongulongulongulongulongulongulongulongThunk';fcns.name{fcnNum}='AlazarSetTriggerOperation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarGetTriggerTimestamp ( HANDLE handle , U32 Record , U64 * Timestamp_samples ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='AlazarGetTriggerTimestamp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'uint64Ptr'};fcnNum=fcnNum+1;
% unsigned int AlazarSetTriggerOperationForScanning ( HANDLE handle , U32 slopeId , U32 level , U32 options ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongulongulongThunk';fcns.name{fcnNum}='AlazarSetTriggerOperationForScanning'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarAbortCapture ( HANDLE handle ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='AlazarAbortCapture'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarForceTrigger ( HANDLE handle ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='AlazarForceTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarForceTriggerEnable ( HANDLE handle ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='AlazarForceTriggerEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarStartCapture ( HANDLE handle ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='AlazarStartCapture'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarCaptureMode ( HANDLE handle , U32 Mode ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongThunk';fcns.name{fcnNum}='AlazarCaptureMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarStreamCapture ( HANDLE handle , void * Buffer , U32 BufferSize , U32 DeviceOption , U32 ChannelSelect , U32 * error ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrulongulongulongvoidPtrThunk';fcns.name{fcnNum}='AlazarStreamCapture'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'ulong', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarHyperDisp ( HANDLE handle , void * buffer , U32 bufferSize , U8 * viewBuffer , U32 viewBufferSize , U32 numOfPixels , U32 option , U32 channelSelect , U32 record , long transferOffset , U32 * error ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrulongvoidPtrulongulongulongulongulonglongvoidPtrThunk';fcns.name{fcnNum}='AlazarHyperDisp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'uint8Ptr', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'long', 'ulongPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarFastPRRCapture ( HANDLE handle , void * Buffer , U32 BufferSize , U32 DeviceOption , U32 ChannelSelect , U32 * error ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrulongulongulongvoidPtrThunk';fcns.name{fcnNum}='AlazarFastPRRCapture'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'ulong', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% U32 AlazarBusy ( HANDLE handle ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='AlazarBusy'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% U32 AlazarTriggered ( HANDLE handle ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='AlazarTriggered'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% U32 AlazarGetStatus ( HANDLE handle ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='AlazarGetStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% U32 AlazarDetectMultipleRecord ( HANDLE handle ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='AlazarDetectMultipleRecord'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarSetRecordCount ( HANDLE handle , U32 Count ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongThunk';fcns.name{fcnNum}='AlazarSetRecordCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarSetRecordSize ( HANDLE handle , U32 preTriggerSamples , U32 postTriggerSamples ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongulongThunk';fcns.name{fcnNum}='AlazarSetRecordSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarSetCaptureClock ( HANDLE handle , U32 source , U32 sampleRateIdOrValue , U32 edgeId , U32 decimation ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongulongulongulongThunk';fcns.name{fcnNum}='AlazarSetCaptureClock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarSetExternalClockLevel ( HANDLE handle , float level_percent ); 
fcns.thunkname{fcnNum}='uint32voidPtrfloatThunk';fcns.name{fcnNum}='AlazarSetExternalClockLevel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'single'};fcnNum=fcnNum+1;
% unsigned int AlazarSetClockSwitchOver ( HANDLE handleBoard , U32 uMode , U32 uDummyClockOnTime_ns , U32 uReserved ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongulongulongThunk';fcns.name{fcnNum}='AlazarSetClockSwitchOver'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% U32 AlazarRead ( HANDLE handle , U32 channelId , void * buffer , int elementSize , long record , long transferOffset , U32 transferLength ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongvoidPtrint32longlongulongThunk';fcns.name{fcnNum}='AlazarRead'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'voidPtr', 'int32', 'long', 'long', 'ulong'};fcnNum=fcnNum+1;
% U32 AlazarReadEx ( HANDLE handle , U32 channelId , void * buffer , int elementSize , long record , S64 transferOffset , U32 transferLength ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongvoidPtrint32longint64ulongThunk';fcns.name{fcnNum}='AlazarReadEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'voidPtr', 'int32', 'long', 'int64', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarSetParameter ( HANDLE handle , U8 channel , U32 parameter , long value ); 
fcns.thunkname{fcnNum}='uint32voidPtruint8ulonglongThunk';fcns.name{fcnNum}='AlazarSetParameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8', 'ulong', 'long'};fcnNum=fcnNum+1;
% unsigned int AlazarSetParameterUL ( HANDLE handle , U8 channel , U32 parameter , U32 value ); 
fcns.thunkname{fcnNum}='uint32voidPtruint8ulongulongThunk';fcns.name{fcnNum}='AlazarSetParameterUL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarGetParameter ( HANDLE handle , U8 channel , U32 parameter , long * retValue ); 
fcns.thunkname{fcnNum}='uint32voidPtruint8ulongvoidPtrThunk';fcns.name{fcnNum}='AlazarGetParameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8', 'ulong', 'longPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarGetParameterUL ( HANDLE handle , U8 channel , U32 parameter , U32 * retValue ); 
fcns.thunkname{fcnNum}='uint32voidPtruint8ulongvoidPtrThunk';fcns.name{fcnNum}='AlazarGetParameterUL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% HANDLE AlazarGetSystemHandle ( U32 systemId ); 
fcns.thunkname{fcnNum}='voidPtrulongThunk';fcns.name{fcnNum}='AlazarGetSystemHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% U32 AlazarNumOfSystems (); 
fcns.thunkname{fcnNum}='ulongThunk';fcns.name{fcnNum}='AlazarNumOfSystems'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% U32 AlazarBoardsInSystemBySystemID ( U32 systemId ); 
fcns.thunkname{fcnNum}='ulongulongThunk';fcns.name{fcnNum}='AlazarBoardsInSystemBySystemID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% U32 AlazarBoardsInSystemByHandle ( HANDLE systemHandle ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='AlazarBoardsInSystemByHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% HANDLE AlazarGetBoardBySystemID ( U32 systemId , U32 boardId ); 
fcns.thunkname{fcnNum}='voidPtrulongulongThunk';fcns.name{fcnNum}='AlazarGetBoardBySystemID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% HANDLE AlazarGetBoardBySystemHandle ( HANDLE systemHandle , U32 boardId ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='AlazarGetBoardBySystemHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarSetLED ( HANDLE handle , U32 state ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongThunk';fcns.name{fcnNum}='AlazarSetLED'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarQueryCapability ( HANDLE handle , U32 capability , U32 reserved , U32 * retValue ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongulongvoidPtrThunk';fcns.name{fcnNum}='AlazarQueryCapability'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% U32 AlazarMaxSglTransfer ( ALAZAR_BOARDTYPES bt ); 
fcns.thunkname{fcnNum}='ulongALAZAR_BOARDTYPESThunk';fcns.name{fcnNum}='AlazarMaxSglTransfer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'BoardTypes'};fcnNum=fcnNum+1;
% unsigned int AlazarGetMaxRecordsCapable ( HANDLE handle , U32 samplesPerRecord , U32 * maxRecordsPerCapture ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='AlazarGetMaxRecordsCapable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% U32 AlazarGetWhoTriggeredBySystemHandle ( HANDLE systemHandle , U32 boardId , U32 recordNumber ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongulongThunk';fcns.name{fcnNum}='AlazarGetWhoTriggeredBySystemHandle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% U32 AlazarGetWhoTriggeredBySystemID ( U32 systemId , U32 boardId , U32 recordNumber ); 
fcns.thunkname{fcnNum}='ulongulongulongulongThunk';fcns.name{fcnNum}='AlazarGetWhoTriggeredBySystemID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarSetBWLimit ( HANDLE handle , U32 channel , U32 enable ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongulongThunk';fcns.name{fcnNum}='AlazarSetBWLimit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarSleepDevice ( HANDLE handle , U32 sleepState ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongThunk';fcns.name{fcnNum}='AlazarSleepDevice'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarStartAutoDMA ( HANDLE handle , void * Buffer1 , U32 UseHeader , U32 ChannelSelect , long TransferOffset , U32 TransferLength , long RecordsPerBuffer , long RecordCount , AUTODMA_STATUS * error , U32 r1 , U32 r2 , U32 * r3 , U32 * r4 ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrulongulonglongulonglonglongvoidPtrulongulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarStartAutoDMA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'ulong', 'long', 'ulong', 'long', 'long', 'e_AUTODMA_STATUSPtr', 'ulong', 'ulong', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarGetNextAutoDMABuffer ( HANDLE handle , void * Buffer1 , void * Buffer2 , long * WhichOne , long * RecordsTransfered , AUTODMA_STATUS * error , U32 r1 , U32 r2 , long * TriggersOccurred , U32 * r4 ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrulongulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarGetNextAutoDMABuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'voidPtr', 'longPtr', 'longPtr', 'e_AUTODMA_STATUSPtr', 'ulong', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarGetNextBuffer ( HANDLE handle , void * Buffer1 , void * Buffer2 , long * WhichOne , long * RecordsTransfered , AUTODMA_STATUS * error , U32 r1 , U32 r2 , long * TriggersOccurred , U32 * r4 ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrulongulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarGetNextBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'voidPtr', 'longPtr', 'longPtr', 'e_AUTODMA_STATUSPtr', 'ulong', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarCloseAUTODma ( HANDLE handle ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='AlazarCloseAUTODma'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarAbortAutoDMA ( HANDLE handle , void * Buffer , AUTODMA_STATUS * error , U32 r1 , U32 r2 , U32 * r3 , U32 * r4 ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrvoidPtrulongulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarAbortAutoDMA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'e_AUTODMA_STATUSPtr', 'ulong', 'ulong', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% U32 AlazarGetAutoDMAHeaderValue ( HANDLE handle , U32 Channel , void * DataBuffer , U32 Record , U32 Parameter , AUTODMA_STATUS * error ); 
fcns.thunkname{fcnNum}='ulongvoidPtrulongvoidPtrulongulongvoidPtrThunk';fcns.name{fcnNum}='AlazarGetAutoDMAHeaderValue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'voidPtr', 'ulong', 'ulong', 'e_AUTODMA_STATUSPtr'};fcnNum=fcnNum+1;
% float AlazarGetAutoDMAHeaderTimeStamp ( HANDLE handle , U32 Channel , void * DataBuffer , U32 Record , AUTODMA_STATUS * error ); 
fcns.thunkname{fcnNum}='floatvoidPtrulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='AlazarGetAutoDMAHeaderTimeStamp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='single'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'voidPtr', 'ulong', 'e_AUTODMA_STATUSPtr'};fcnNum=fcnNum+1;
% void * AlazarGetAutoDMAPtr ( HANDLE handle , U32 DataOrHeader , U32 Channel , void * DataBuffer , U32 Record , AUTODMA_STATUS * error ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulongulongvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='AlazarGetAutoDMAPtr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'voidPtr', 'ulong', 'e_AUTODMA_STATUSPtr'};fcnNum=fcnNum+1;
% U32 AlazarWaitForBufferReady ( HANDLE handle , long tms ); 
fcns.thunkname{fcnNum}='ulongvoidPtrlongThunk';fcns.name{fcnNum}='AlazarWaitForBufferReady'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'voidPtr', 'long'};fcnNum=fcnNum+1;
% unsigned int AlazarEvents ( HANDLE handle , U32 enable ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongThunk';fcns.name{fcnNum}='AlazarEvents'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% long AlazarFlushAutoDMA ( HANDLE h ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='AlazarFlushAutoDMA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% void AlazarStopAutoDMA ( HANDLE h ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='AlazarStopAutoDMA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarBeforeAsyncRead ( HANDLE handle , U32 channelSelect , long transferOffset , U32 transferLength , U32 recordsPerBuffer , U32 recordsPerAcquisition , U32 flags ); 
fcns.thunkname{fcnNum}='uint32voidPtrulonglongulongulongulongulongThunk';fcns.name{fcnNum}='AlazarBeforeAsyncRead'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'long', 'ulong', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarAbortAsyncRead ( HANDLE handle ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='AlazarAbortAsyncRead'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarPostAsyncBuffer ( HANDLE handle , void * buffer , U32 bufferLength_bytes ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='AlazarPostAsyncBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarWaitAsyncBufferComplete ( HANDLE handle , void * buffer , U32 timeout_ms ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='AlazarWaitAsyncBufferComplete'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarWaitNextAsyncBufferComplete ( HANDLE handle , void * buffer , U32 bytesToCopy , U32 timeout_ms ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrulongulongThunk';fcns.name{fcnNum}='AlazarWaitNextAsyncBufferComplete'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarCreateStreamFileA ( HANDLE handle , const char * filePath ); 
fcns.thunkname{fcnNum}='uint32voidPtrcstringThunk';fcns.name{fcnNum}='AlazarCreateStreamFileA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% unsigned int AlazarResetTimeStamp ( HANDLE handle , U32 option ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongThunk';fcns.name{fcnNum}='AlazarResetTimeStamp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarReadRegister ( HANDLE handle , U32 offset , U32 * retVal , U32 pswrd ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongvoidPtrulongThunk';fcns.name{fcnNum}='AlazarReadRegister'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulongPtr', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarWriteRegister ( HANDLE handle , U32 offset , U32 Val , U32 pswrd ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongulongulongThunk';fcns.name{fcnNum}='AlazarWriteRegister'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% unsigned int ReadC ( HANDLE handle , U8 * DmaBuffer , U32 SizeToRead , U32 LocalAddress ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrulongulongThunk';fcns.name{fcnNum}='ReadC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8Ptr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% void WriteC ( HANDLE handle , U8 * DmaBuffer , U32 SizeToRead , U32 LocalAddress ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrulongulongThunk';fcns.name{fcnNum}='WriteC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'uint8Ptr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarGetTriggerAddressA ( HANDLE handle , U32 Record , U32 * TriggerAddress , U32 * TimeStampHighPart , U32 * TimeStampLowPart ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarGetTriggerAddressA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulongPtr', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarGetTriggerAddressB ( HANDLE handle , U32 Record , U32 * TriggerAddress , U32 * TimeStampHighPart , U32 * TimeStampLowPart ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarGetTriggerAddressB'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulongPtr', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% unsigned int ATS9462FlashSectorPageRead ( HANDLE handle , U32 address , U16 * PageBuff ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='ATS9462FlashSectorPageRead'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'uint16Ptr'};fcnNum=fcnNum+1;
% unsigned int ATS9462PageWriteToFlash ( HANDLE handle , U32 address , U16 * PageBuff ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='ATS9462PageWriteToFlash'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'uint16Ptr'};fcnNum=fcnNum+1;
% unsigned int ATS9462FlashSectorErase ( HANDLE handle , int sectorNum ); 
fcns.thunkname{fcnNum}='uint32voidPtrint32Thunk';fcns.name{fcnNum}='ATS9462FlashSectorErase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% unsigned int ATS9462FlashChipErase ( HANDLE h ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='ATS9462FlashChipErase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% unsigned int SetControlCommand ( HANDLE handle , int cmd ); 
fcns.thunkname{fcnNum}='uint32voidPtrint32Thunk';fcns.name{fcnNum}='SetControlCommand'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% unsigned int AlazarConfigureAuxIO ( HANDLE handle , U32 mode , U32 parameter ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongulongThunk';fcns.name{fcnNum}='AlazarConfigureAuxIO'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% const char * AlazarErrorToText ( unsigned int retCode ); 
fcns.thunkname{fcnNum}='cstringuint32Thunk';fcns.name{fcnNum}='AlazarErrorToText'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% unsigned int AlazarConfigureSampleSkipping ( HANDLE handle , U32 mode , U32 sampleClocksPerRecord , U16 * sampleSkipBitmap ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongulongvoidPtrThunk';fcns.name{fcnNum}='AlazarConfigureSampleSkipping'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'uint16Ptr'};fcnNum=fcnNum+1;
% unsigned int AlazarCoprocessorRegisterRead ( HANDLE handle , U32 offset , U32 * value ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='AlazarCoprocessorRegisterRead'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarCoprocessorRegisterWrite ( HANDLE handle , U32 offset , U32 value ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongulongThunk';fcns.name{fcnNum}='AlazarCoprocessorRegisterWrite'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarCoprocessorDownloadA ( HANDLE handle , char * fileName , U32 options ); 
fcns.thunkname{fcnNum}='uint32voidPtrcstringulongThunk';fcns.name{fcnNum}='AlazarCoprocessorDownloadA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarConfigureRecordAverage ( HANDLE handle , U32 mode , U32 samplesPerRecord , U32 recordsPerAverage , U32 options ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongulongulongulongThunk';fcns.name{fcnNum}='AlazarConfigureRecordAverage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% U8 * AlazarAllocBufferU8 ( HANDLE handle , U32 sampleCount ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='AlazarAllocBufferU8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8Ptr'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarFreeBufferU8 ( HANDLE handle , U8 * buffer ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarFreeBufferU8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8Ptr'};fcnNum=fcnNum+1;
% U16 * AlazarAllocBufferU16 ( HANDLE handle , U32 sampleCount ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='AlazarAllocBufferU16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16Ptr'; fcns.RHS{fcnNum}={'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarFreeBufferU16 ( HANDLE handle , U16 * buffer ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarFreeBufferU16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
% U8 * AlazarAllocBufferU8Ex ( HANDLE handle , U64 sampleCount ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtruint64Thunk';fcns.name{fcnNum}='AlazarAllocBufferU8Ex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8Ptr'; fcns.RHS{fcnNum}={'voidPtr', 'uint64'};fcnNum=fcnNum+1;
% unsigned int AlazarFreeBufferU8Ex ( HANDLE handle , U8 * buffer ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarFreeBufferU8Ex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8Ptr'};fcnNum=fcnNum+1;
% unsigned int AlazarConfigureLSB ( HANDLE handle , U32 valueLsb0 , U32 valueLsb1 ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongulongThunk';fcns.name{fcnNum}='AlazarConfigureLSB'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarExtractFFTNPTFooters ( void * buffer , U32 recordSize_bytes , U32 bufferSize_bytes , NPTFooter * footersArray , U32 numFootersToExtract ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongulongvoidPtrulongThunk';fcns.name{fcnNum}='AlazarExtractFFTNPTFooters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 's_NPTFooterPtr', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarExtractTimeDomainNPTFooters ( void * buffer , U32 recordSize_bytes , U32 bufferSize_bytes , NPTFooter * footersArray , U32 numFootersToExtract ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongulongvoidPtrulongThunk';fcns.name{fcnNum}='AlazarExtractTimeDomainNPTFooters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 's_NPTFooterPtr', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarExtractNPTFooters ( void * buffer , U32 recordSize_bytes , U32 bufferSize_bytes , NPTFooter * footersArray , U32 numFootersToExtract ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongulongvoidPtrulongThunk';fcns.name{fcnNum}='AlazarExtractNPTFooters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'ulong', 's_NPTFooterPtr', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarDisableDSP ( HANDLE boardHandle ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='AlazarDisableDSP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarOCTIgnoreBadClock ( HANDLE handle , U32 enable , double goodClockDuration_seconds , double badClockDuration_seconds , double * triggerCycleTime_seconds , double * triggerPulseWidth_seconds ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongdoubledoublevoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarOCTIgnoreBadClock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'double', 'double', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% unsigned int AlazarSetADCBackgroundCompensation ( HANDLE handle , U8 active ); 
fcns.thunkname{fcnNum}='uint32voidPtruint8Thunk';fcns.name{fcnNum}='AlazarSetADCBackgroundCompensation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'uint8'};fcnNum=fcnNum+1;
% unsigned int AlazarDSPGetModules ( HANDLE boardHandle , U32 numEntries , dsp_module_handle * modules , U32 * numModules ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarDSPGetModules'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'ulong', 'dsp_module_descriptorPtrPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarDSPGetInfo ( dsp_module_handle dspHandle , U32 * dspModuleId , U16 * versionMajor , U16 * versionMinor , U32 * maxLength , U32 * reserved0 , U32 * reserved1 ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarDSPGetInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'dsp_module_descriptorPtr', 'ulongPtr', 'uint16Ptr', 'uint16Ptr', 'ulongPtr', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarDSPGenerateWindowFunction ( U32 windowType , float * window , U32 windowLength_samples , U32 paddingLength_samples ); 
fcns.thunkname{fcnNum}='uint32ulongvoidPtrulongulongThunk';fcns.name{fcnNum}='AlazarDSPGenerateWindowFunction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'ulong', 'singlePtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarFFTGetMaxTriggerRepeatRate ( dsp_module_handle dspHandle , U32 fftSize , double * maxTriggerRepeatRate ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='AlazarFFTGetMaxTriggerRepeatRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'dsp_module_descriptorPtr', 'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% unsigned int AlazarFFTBackgroundSubtractionSetRecordS16 ( dsp_module_handle dspHandle , const S16 * record , U32 size_samples ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='AlazarFFTBackgroundSubtractionSetRecordS16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'dsp_module_descriptorPtr', 'int16Ptr', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarFFTBackgroundSubtractionGetRecordS16 ( dsp_module_handle dspHandle , S16 * backgroundRecord , U32 size_samples ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='AlazarFFTBackgroundSubtractionGetRecordS16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'dsp_module_descriptorPtr', 'int16Ptr', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarFFTBackgroundSubtractionSetEnabled ( dsp_module_handle dspHandle , U8 enabled ); 
fcns.thunkname{fcnNum}='uint32voidPtruint8Thunk';fcns.name{fcnNum}='AlazarFFTBackgroundSubtractionSetEnabled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'dsp_module_descriptorPtr', 'uint8'};fcnNum=fcnNum+1;
% unsigned int AlazarFFTSetWindowFunction ( dsp_module_handle dspHandle , U32 samplesPerRecord , float * realWindowArray , float * imagWindowArray ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarFFTSetWindowFunction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'dsp_module_descriptorPtr', 'ulong', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
% unsigned int AlazarFFTGetWindowFunction ( dsp_module_handle dspHandle , U32 samplesPerRecord , float * realWindowArray , float * imagWindowArray ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='AlazarFFTGetWindowFunction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'dsp_module_descriptorPtr', 'ulong', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
% unsigned int AlazarFFTVerificationMode ( dsp_module_handle dspHandle , U8 enable , S16 * realArray , S16 * imagArray , unsigned long recordLength_samples ); 
fcns.thunkname{fcnNum}='uint32voidPtruint8voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='AlazarFFTVerificationMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'dsp_module_descriptorPtr', 'uint8', 'int16Ptr', 'int16Ptr', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarFFTSetup ( dsp_module_handle dspHandle , U16 inputChannelMask , U32 recordLength_samples , U32 fftLength_samples , U32 outputFormat , U32 footer , U32 reserved , U32 * bytesPerOutputRecord ); 
fcns.thunkname{fcnNum}='uint32voidPtruint16ulongulongulongulongulongvoidPtrThunk';fcns.name{fcnNum}='AlazarFFTSetup'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'dsp_module_descriptorPtr', 'uint16', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarFFTSetScalingAndSlicing ( dsp_module_handle dspHandle , U8 slice_pos , float loge_ampl_mult ); 
fcns.thunkname{fcnNum}='uint32voidPtruint8floatThunk';fcns.name{fcnNum}='AlazarFFTSetScalingAndSlicing'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'dsp_module_descriptorPtr', 'uint8', 'single'};fcnNum=fcnNum+1;
% unsigned int AlazarDSPGetBuffer ( HANDLE boardHandle , void * buffer , U32 timeout_ms ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrulongThunk';fcns.name{fcnNum}='AlazarDSPGetBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarDSPGetNextBuffer ( HANDLE boardHandle , void * buffer , U32 bytesToCopy , U32 timeout_ms ); 
fcns.thunkname{fcnNum}='uint32voidPtrvoidPtrulongulongThunk';fcns.name{fcnNum}='AlazarDSPGetNextBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarDSPGetParameterU32 ( dsp_module_handle dspHandle , U32 parameter , U32 * result ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='AlazarDSPGetParameterU32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'dsp_module_descriptorPtr', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarDSPGetParameterS32 ( dsp_module_handle dspHandle , U32 parameter , S32 * result ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='AlazarDSPGetParameterS32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'dsp_module_descriptorPtr', 'ulong', 'longPtr'};fcnNum=fcnNum+1;
% unsigned int AlazarDSPSetParameterS32 ( dsp_module_handle dspHandle , U32 parameter , S32 value ); 
fcns.thunkname{fcnNum}='uint32voidPtrulonglongThunk';fcns.name{fcnNum}='AlazarDSPSetParameterS32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'dsp_module_descriptorPtr', 'ulong', 'long'};fcnNum=fcnNum+1;
% unsigned int AlazarDSPGetParameterFloat ( dsp_module_handle dspHandle , U32 parameter , float * result ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongvoidPtrThunk';fcns.name{fcnNum}='AlazarDSPGetParameterFloat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'dsp_module_descriptorPtr', 'ulong', 'singlePtr'};fcnNum=fcnNum+1;
% unsigned int AlazarDSPSetParameterFloat ( dsp_module_handle dspHandle , U32 parameter , float value ); 
fcns.thunkname{fcnNum}='uint32voidPtrulongfloatThunk';fcns.name{fcnNum}='AlazarDSPSetParameterFloat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'dsp_module_descriptorPtr', 'ulong', 'single'};fcnNum=fcnNum+1;
% unsigned int AlazarDSPConfigureSelfTrigger ( dsp_module_handle dspHandle , U8 enable , U32 counter ); 
fcns.thunkname{fcnNum}='uint32voidPtruint8ulongThunk';fcns.name{fcnNum}='AlazarDSPConfigureSelfTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'dsp_module_descriptorPtr', 'uint8', 'ulong'};fcnNum=fcnNum+1;
% unsigned int AlazarDSPConfigureSampleSkipping ( dsp_module_handle dspHandle , U8 independentMode , U32 count , U16 * vector ); 
fcns.thunkname{fcnNum}='uint32voidPtruint8ulongvoidPtrThunk';fcns.name{fcnNum}='AlazarDSPConfigureSampleSkipping'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'dsp_module_descriptorPtr', 'uint8', 'ulong', 'uint16Ptr'};fcnNum=fcnNum+1;
% unsigned int AlazarDSPAbortCapture ( HANDLE boardHandle ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='AlazarDSPAbortCapture'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
structs.s_BoardDef.members=struct('RecordCount', 'ulong', 'RecLength', 'ulong', 'PreDepth', 'ulong', 'ClockSource', 'ulong', 'ClockEdge', 'ulong', 'SampleRate', 'ulong', 'CouplingChanA', 'ulong', 'InputRangeChanA', 'ulong', 'InputImpedChanA', 'ulong', 'CouplingChanB', 'ulong', 'InputRangeChanB', 'ulong', 'InputImpedChanB', 'ulong', 'TriEngOperation', 'ulong', 'TriggerEngine1', 'ulong', 'TrigEngSource1', 'ulong', 'TrigEngSlope1', 'ulong', 'TrigEngLevel1', 'ulong', 'TriggerEngine2', 'ulong', 'TrigEngSource2', 'ulong', 'TrigEngSlope2', 'ulong', 'TrigEngLevel2', 'ulong');
structs.s_HEADER2.members=struct('TimeStampLowPart', 'uint32');
structs.s_NPTFooter.members=struct('triggerTimestamp', 'uint64', 'recordNumber', 'ulong', 'frameCount', 'ulong', 'aux_in_state', 'uint8');
structs.dsp_module_descriptor.members=struct('');
enuminfo.e_MSILS=struct('KINDEPENDENT',0,'KSLAVE',1,'KMASTER',2,'KLASTSLAVE',3);
enuminfo.DSP_MODULE_TYPE=struct('DSP_MODULE_NONE',65535,'DSP_MODULE_FFT',65536,'DSP_MODULE_PCD',65537,'DSP_MODULE_SSK',65538,'DSP_MODULE_DIS',65539);
enuminfo.DSP_PARAMETERS_FLOAT=struct('DSP_FFT_POSTPROC_REAL_B',0,'DSP_FFT_POSTPROC_REAL_C',1,'DSP_FFT_POSTPROC_IMAG_B',2,'DSP_FFT_POSTPROC_IMAG_C',3,'DSP_FFT_POSTPROC_SCALE_OUT_MAIN',4,'DSP_FFT_POSTPROC_SCALE_OUT_SEC',5);
enuminfo.DSP_PARAMETERS_S32=struct('DSP_FFT_POSTPROC_REAL_A',0,'DSP_FFT_POSTPROC_IMAG_A',1);
enuminfo.ALAZAR_ADMA_MODES=struct('ADMA_TRADITIONAL_MODE',0,'ADMA_CONTINUOUS_MODE',256,'ADMA_NPT',512,'ADMA_TRIGGERED_STREAMING',1024);
enuminfo.FFT_OUTPUT_FORMAT=struct('FFT_OUTPUT_FORMAT_U32_AMP2',0,'FFT_OUTPUT_FORMAT_U16_LOG',1,'FFT_OUTPUT_FORMAT_U16_AMP2',257,'FFT_OUTPUT_FORMAT_U8_LOG',2,'FFT_OUTPUT_FORMAT_U8_AMP2',258,'FFT_OUTPUT_FORMAT_S32_REAL',3,'FFT_OUTPUT_FORMAT_S32_IMAG',4,'FFT_OUTPUT_FORMAT_FLOAT_AMP2',10,'FFT_OUTPUT_FORMAT_FLOAT_LOG',11,'FFT_OUTPUT_FORMAT_RAW_PLUS_FFT',4096,'FFT_OUTPUT_FORMAT_S32_AMP2',1024,'FFT_OUTPUT_FORMAT_S32_LOG',1025,'FFT_OUTPUT_FORMAT_S32_PHASE',1026,'FFT_OUTPUT_FORMAT_S16_REAL',1027,'FFT_OUTPUT_FORMAT_S16_IMAG',1028,'FFT_OUTPUT_FORMAT_S16_LOG',1029,'FFT_OUTPUT_FORMAT_S16_AMP2',1030,'FFT_OUTPUT_FORMAT_S16_PHASE',1031,'FFT_OUTPUT_FORMAT_S8_REAL',1032,'FFT_OUTPUT_FORMAT_S8_IMAG',1033,'FFT_OUTPUT_FORMAT_S8_LOG',1034,'FFT_OUTPUT_FORMAT_S8_AMP2',1035,'FFT_OUTPUT_FORMAT_S8_PHASE',1036,'FFT_OUTPUT_FORMAT_FLOAT_REAL',1037,'FFT_OUTPUT_FORMAT_FLOAT_IMAG',1038,'FFT_OUTPUT_FORMAT_FLOAT_PHASE',1039,'FFT_OUTPUT_FORMAT_S16_AMP2_AND_PHASE',1040,'FFT_OUTPUT_FORMAT_S16_LOG_AND_PHASE',1041,'FFT_OUTPUT_FORMAT_S16_REAL_AND_IMAG',1042,'FFT_OUTPUT_FORMAT_DEBUG_DP2_M5',1043,'FFT_OUTPUT_FORMAT_DEBUG_DP2_M6',1044,'FFT_OUTPUT_FORMAT_DEBUG_DP2_M7',1045,'FFT_OUTPUT_FORMAT_U32',0,'FFT_OUTPUT_FORMAT_REAL_S32',3,'FFT_OUTPUT_FORMAT_IMAG_S32',4);
enuminfo.ALAZAR_ADMA_FLAGS=struct('ADMA_EXTERNAL_STARTCAPTURE',1,'ADMA_ENABLE_RECORD_HEADERS',8,'ADMA_SINGLE_DMA_CHANNEL',16,'ADMA_ALLOC_BUFFERS',32,'ADMA_FIFO_ONLY_STREAMING',2048,'ADMA_INTERLEAVE_SAMPLES',4096,'ADMA_GET_PROCESSED_DATA',8192,'ADMA_DSP',16384,'ADMA_ENABLE_RECORD_FOOTERS',65536,'ADMA_DUAL_BUFFER_MODE',131072);
enuminfo.e_AUTODMA_STATUS=struct('ADMA_Completed',0,'ADMA_Buffer1Invalid',1,'ADMA_Buffer2Invalid',2,'ADMA_BoardHandleInvalid',3,'ADMA_InternalBuffer1Invalid',4,'ADMA_InternalBuffer2Invalid',5,'ADMA_OverFlow',6,'ADMA_InvalidChannel',7,'ADMA_DMAInProgress',8,'ADMA_UseHeaderNotSet',9,'ADMA_HeaderNotValid',10,'ADMA_InvalidRecsPerBuffer',11,'ADMA_InvalidTransferOffset',12,'ADMA_InvalidCFlags',13);
enuminfo.ALAZAR_CRA_OPTIONS=struct('CRA_OPTION_UNSIGNED',0,'CRA_OPTION_SIGNED',2);
enuminfo.ALAZAR_CRA_MODES=struct('CRA_MODE_DISABLE',0,'CRA_MODE_ENABLE_FPGA_AVE',1);
enuminfo.FFT_FOOTER=struct('FFT_FOOTER_NONE',0,'FFT_FOOTER_NPT',1);
enuminfo.DSP_PARAMETERS_U32=struct('DSP_RAW_PLUS_FFT_SUPPORTED',0,'DSP_FFT_SUBTRACTOR_SUPPORTED',1);
enuminfo.BoardTypes=struct('ATS_NONE',0,'ATS850',1,'ATS310',2,'ATS330',3,'ATS855',4,'ATS315',5,'ATS335',6,'ATS460',7,'ATS860',8,'ATS660',9,'ATS665',10,'ATS9462',11,'ATS9434',12,'ATS9870',13,'ATS9350',14,'ATS9325',15,'ATS9440',16,'ATS9410',17,'ATS9351',18,'ATS9310',19,'ATS9461',20,'ATS9850',21,'ATS9625',22,'ATG6500',23,'ATS9626',24,'ATS9360',25,'AXI8870',26,'ATS9370',27,'ATU7825',28,'ATS9373',29,'ATS9416',30,'ATS9637',31,'ATS9120',32,'ATS9371',33,'ATS_LAST',34);
enuminfo.DSP_WINDOW_ITEMS=struct('DSP_WINDOW_NONE',0,'DSP_WINDOW_HANNING',1,'DSP_WINDOW_HAMMING',2,'DSP_WINDOW_BLACKMAN',3,'DSP_WINDOW_BLACKMAN_HARRIS',4,'DSP_WINDOW_BARTLETT',5,'NUM_DSP_WINDOW_ITEMS',6);
methodinfo=fcns;